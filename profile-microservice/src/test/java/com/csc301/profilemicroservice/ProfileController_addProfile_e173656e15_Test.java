// Test generated by RoostGPT for test spotifyApi-Test using AI Type Open AI and AI Model gpt-4

package com.csc301.profilemicroservice;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.when;

import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.mock.web.MockHttpServletRequest;

@RunWith(MockitoJUnitRunner.class)
public class ProfileController_addProfile_e173656e15_Test {
    
    @InjectMocks
    ProfileController profileController = new ProfileController();
    
    @Mock
    ProfileDriver profileDriver = new ProfileDriver();
    
    private Map<String, String> params;
    private HttpServletRequest request;
    
    @Before
    public void setup() {
        params = new HashMap<>();
        request = new MockHttpServletRequest();
    }
    
    @Test
    public void testAddProfile_Success() {
        params.put("userName", "testUser");
        params.put("fullName", "Test User");
        params.put("password", "password");
        
        DbQueryStatus mockDbQueryStatus = new DbQueryStatus("Profile Created", DbQueryExecResult.QUERY_OK);
        when(profileDriver.createUserProfile("testUser", "Test User", "password")).thenReturn(mockDbQueryStatus);
        
        Map<String, Object> result = profileController.addProfile(params, request);
        
        assertEquals("POST /", result.get("path"));
        assertEquals("Profile Created", result.get("message"));
        assertEquals(200, result.get("status"));
    }
    
    @Test
    public void testAddProfile_Failure() {
        params.put("userName", "testUser");
        params.put("fullName", "Test User");
        params.put("password", "password");
        
        DbQueryStatus mockDbQueryStatus = new DbQueryStatus("Failed to create profile", DbQueryExecResult.QUERY_ERROR_GENERIC);
        when(profileDriver.createUserProfile("testUser", "Test User", "password")).thenReturn(mockDbQueryStatus);
        
        Map<String, Object> result = profileController.addProfile(params, request);
        
        assertEquals("POST /", result.get("path"));
        assertEquals("Failed to create profile", result.get("message"));
        assertEquals(500, result.get("status"));
    }
}
