// Test generated by RoostGPT for test spotifyApi-Test using AI Type Open AI and AI Model gpt-4

package com.csc301.songmicroservice;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.when;

import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.json.JSONObject;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.mock.web.MockHttpServletRequest;

import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.FormBody; // Added import for FormBody

@RunWith(MockitoJUnitRunner.class)
public class SongController_addSong_53d0335b11_Test {

    @InjectMocks
    SongController songController;

    @Mock
    OkHttpClient client;

    @Mock
    Response response;

    @Mock
    SongDal songDal;

    @Mock
    DbQueryStatus dbQueryStatus;

    private Map<String, String> params;
    private HttpServletRequest request;

    @Before
    public void setup() {
        params = new HashMap<>();
        params.put(Song.KEY_SONG_NAME, "Test Song");
        params.put(Song.KEY_SONG_ARTIST_FULL_NAME, "Test Artist");
        params.put(Song.KEY_SONG_ALBUM, "Test Album");

        request = new MockHttpServletRequest();
    }

    @Test
    public void testAddSongSuccess() throws Exception {
        when(songDal.addSong(new Song(params.get(Song.KEY_SONG_NAME), params.get(Song.KEY_SONG_ARTIST_FULL_NAME), params.get(Song.KEY_SONG_ALBUM)))).thenReturn(dbQueryStatus);
        when(dbQueryStatus.getdbQueryExecResult()).thenReturn(DbQueryExecResult.QUERY_OK);

        Map<String, String> song = new HashMap<>();
        song.put("id", "1");
        song.put("songName", params.get(Song.KEY_SONG_NAME));
        when(dbQueryStatus.getData()).thenReturn(song);

        when(client.newCall(new Request.Builder().url("http://localhost:3002/addSong/" + song.get("id") + "/" + song.get("songName")).post(new FormBody.Builder().build()).build()).execute()).thenReturn(response);
        when(response.body().string()).thenReturn(new JSONObject().put("status", "OK").toString());

        Map<String, Object> result = songController.addSong(params, request);
        assertEquals("POST " + Utils.getUrl(request), result.get("path"));
        assertEquals("OK", result.get("status"));
    }

    @Test
    public void testAddSongFailure() throws Exception {
        when(songDal.addSong(new Song(params.get(Song.KEY_SONG_NAME), params.get(Song.KEY_SONG_ARTIST_FULL_NAME), params.get(Song.KEY_SONG_ALBUM)))).thenReturn(dbQueryStatus);
        when(dbQueryStatus.getdbQueryExecResult()).thenReturn(DbQueryExecResult.QUERY_ERROR_GENERIC);

        Map<String, Object> result = songController.addSong(params, request);
        assertEquals("POST " + Utils.getUrl(request), result.get("path"));
        assertEquals("ERROR", result.get("status"));
    }
}
